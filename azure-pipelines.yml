# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - main

pool:
  name: Ashok-Self

variables:
  imageName: allureddy/test
  tag: $(Build.BuildId)

stages:

  - stage: SonarQubeAnalysis
    displayName: 'SonarQube Analysis Stage'
    jobs:
      - job: SonarQubeScan
        displayName: 'Run SonarQube Scan'
        steps:
          - task: SonarQubePrepare@5
            inputs:
              SonarQube: 'SonarQube'
              scannerMode: 'CLI'
              configMode: 'manual'
              cliProjectKey: 'your-project-key'
              cliProjectName: 'your-project-name'
              cliSources: '.'

          - task: Maven@4
            displayName: 'Maven Build with Sonar Scan'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'clean install sonar:sonar'
              options: '-X'

          - task: SonarQubePublish@5
            inputs:
              pollingTimeoutSec: '300'

  - stage: DockerBuild
    displayName: 'Docker Build Stage'
    dependsOn: SonarQubeAnalysis
    jobs:
      - job: BuildImage
        displayName: 'Build Docker Image'
        steps:
          - task: Docker@2
            displayName: 'Build Docker Image'
            inputs:
              command: 'build'
              Dockerfile: '**/Dockerfile'
              tags: |
                $(tag)
              repository: '$(imageName)'

  - stage: DockerPush
    displayName: 'Docker Push Stage'
    dependsOn: DockerBuild
    jobs:
      - job: PushImage
        displayName: 'Push Image to Docker Hub'
        steps:
          - task: Docker@2
            displayName: 'Push Docker Image to Docker Hub'
            inputs:
              command: push
              repository: $(imageName)
              tags: |
                $(tag)
              containerRegistry: 'DockerHub'

  - stage: TrivyScan
    displayName: 'Trivy Security Scan Stage'
    dependsOn: DockerPush
    jobs:
      - job: TrivyScanJob
        displayName: 'Run Trivy Image Scan'
        steps:
          - script: |
              trivy image --exit-code 0 --severity HIGH,CRITICAL $(imageName):$(Build.BuildId)
            displayName: 'Trivy Image Scan'
            continueOnError: true

  - stage: RunContainer
    displayName: 'Run Docker Container Stage'
    dependsOn: TrivyScan
    jobs:
      - job: RunContainerJob
        displayName: 'Run Docker Container'
        steps:
          - script: |
              docker run -d --name demo-container -p 8081:8080 $(imageName):$(Build.BuildId)
            displayName: 'Run Docker Container'
